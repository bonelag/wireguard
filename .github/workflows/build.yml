name: Build WireGuard Windows

on:
  push:
    branches: [ master, main ]
    tags:
      - 'v*'
  pull_request:
    branches: [ master, main ]
  workflow_dispatch:

env:
  GO_VERSION: '1.20.14'

jobs:
  build:
    name: Build WireGuard.exe
    runs-on: windows-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            .deps
            ~\AppData\Local\go-build
            ~\go\pkg\mod
          key: ${{ runner.os }}-go-amd64-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-amd64-
            ${{ runner.os }}-go-

      - name: Install dependencies
        shell: cmd
        run: |
          if not exist .deps mkdir .deps
          cd .deps
          
          echo [+] Downloading Go
          curl -fsSL -o go.zip https://go.dev/dl/go${{ env.GO_VERSION }}.windows-amd64.zip
          tar -xf go.zip
          del go.zip
          
          echo [+] Downloading LLVM-MinGW
          curl -fsSL -o llvm-mingw.zip https://download.wireguard.com/windows-toolchain/distfiles/llvm-mingw-20201020-msvcrt-x86_64.zip
          tar -xf llvm-mingw.zip
          del llvm-mingw.zip
          
          echo [+] Downloading ImageMagick
          curl -fsSL -o imagemagick.zip https://download.wireguard.com/windows-toolchain/distfiles/ImageMagick-7.0.8-42-portable-Q16-x64.zip
          tar -xf imagemagick.zip convert.exe colors.xml delegates.xml
          del imagemagick.zip
          
          echo [+] Downloading Make
          curl -fsSL -o make.zip https://download.wireguard.com/windows-toolchain/distfiles/make-4.2.1-without-guile-w32-bin.zip
          tar -xf make.zip --strip-components 1 bin
          del make.zip
          
          echo [+] Downloading WireGuard Tools
          curl -fsSL -o wireguard-tools.zip https://git.zx2c4.com/wireguard-tools/snapshot/wireguard-tools-1ee37b8e4833a25efe6f1fc0d5bdcb476148f4ba.zip
          tar -xf wireguard-tools.zip --exclude wg-quick --strip-components 1
          del wireguard-tools.zip
          
          echo [+] Downloading WireGuard NT
          curl -fsSL -o wireguard-nt.zip https://download.wireguard.com/wireguard-nt/wireguard-nt-0.10.1.zip
          tar -xf wireguard-nt.zip
          del wireguard-nt.zip
          
          copy /y NUL prepared > NUL
          cd ..

      - name: Render icons
        shell: cmd
        run: |
          set PATH=%CD%\.deps\bin;%CD%\.deps;%PATH%
          for %%a in (ui\icon\*.svg) do (
            convert -background none "%%a" -define icon:auto-resize="256,192,128,96,64,48,40,32,24,20,16" -compress zip "%%~dpna.ico"
          )

      - name: Get version
        id: version
        shell: pwsh
        run: |
          $version = Select-String -Path "version\version.go" -Pattern 'Number\s*=\s*"([0-9.]+)"' | ForEach-Object { $_.Matches.Groups[1].Value }
          echo "VERSION=$version" >> $env:GITHUB_OUTPUT
          echo "Building version: $version"
          
          # Split version and pad with zeros, then join with commas
          $parts = $version -split '\.'
          while ($parts.Count -lt 4) { $parts += '0' }
          $versionArray = $parts[0..3] -join ','
          echo "VERSION_ARRAY=$versionArray" >> $env:GITHUB_OUTPUT
          echo "Version array: $versionArray"

      - name: Build resources
        shell: pwsh
        run: |
          # Ensure llvm-mingw tools are on PATH
          $env:PATH = "$pwd\.deps\\llvm-mingw\\bin;" + $env:PATH

          # Create a temporary resources file with proper version defines
          $versionArray = '${{ steps.version.outputs.VERSION_ARRAY }}'
          $versionStr = '${{ steps.version.outputs.VERSION }}'
          
          Write-Host "Version Array: $versionArray"
          Write-Host "Version String: $versionStr"
          
          # Read original file and normalize line endings to LF
          $content = Get-Content resources.rc -Raw -Encoding UTF8
          $content = $content -replace "`r`n", "`n"
          
          # Create defines with LF line endings
          $defines = "#define WIREGUARD_VERSION_ARRAY $versionArray`n#define WIREGUARD_VERSION_STR `"$versionStr`"`n`n"
          $fullContent = $defines + $content
          
          # Write to temp file with UTF8 without BOM
          $utf8NoBom = New-Object System.Text.UTF8Encoding $false
          [System.IO.File]::WriteAllText("$pwd\resources_tmp.rc", $fullContent, $utf8NoBom)
          
          Write-Host "=== First 30 lines of resources_tmp.rc ==="
          Get-Content resources_tmp.rc | Select-Object -First 30 | ForEach-Object { Write-Host $_ }
          Write-Host "==========================================="

          # Run windres on the temporary file
          x86_64-w64-mingw32-windres -I ".deps\\wireguard-nt\\bin\\amd64" -i resources_tmp.rc -o "resources_amd64.syso" -O coff -c 65001
          
          if ($LASTEXITCODE -ne 0) {
            Write-Host "windres failed with exit code $LASTEXITCODE"
            exit 1
          }
          
          Remove-Item resources_tmp.rc -ErrorAction SilentlyContinue

      - name: Build WireGuard.exe
        shell: cmd
        env:
          GOOS: windows
          GOARCH: amd64
        run: |
          set PATH=%CD%\.deps\go\bin;%PATH%
          set GOOS=windows
          set GOARCH=amd64
          
          if not exist amd64 mkdir amd64
          
          echo [+] Building WireGuard for amd64
          go build -tags load_wgnt_from_rsrc -ldflags="-H windowsgui -s -w" -trimpath -buildvcs=false -v -o "amd64\wireguard.exe"

      - name: Build wg.exe command line tool
        shell: cmd
        run: |
          set PATH=%CD%\.deps\llvm-mingw\bin;%CD%\.deps;%PATH%
          cd .deps\src
          
          echo [+] Building wg.exe for amd64
          set LDFLAGS=-s
          make PLATFORM=windows CC=x86_64-w64-mingw32-gcc WINDRES=x86_64-w64-mingw32-windres V=1 RUNSTATEDIR= SYSTEMDUNITDIR= wg.exe
          
          move /Y wg.exe ..\..\amd64\wg.exe

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: wireguard-windows-amd64-${{ steps.version.outputs.VERSION }}
          path: |
            amd64/wireguard.exe
            amd64/wg.exe
          if-no-files-found: error
          retention-days: 30
